print(_G.grabWhenAbove)
print(_G.stacksBeforeGrabbing)

repeat wait() until game:IsLoaded()
repeat wait() until workspace:FindFirstChild("Islands")

local loaded = false
while wait(.1) do
	if(loaded) then break end
	for i,v in pairs(workspace.Islands:GetChildren()) do
		if(v:FindFirstChild("Owners") and v.Owners:FindFirstChild(game.Players.LocalPlayer.UserId) and v:FindFirstChild("FinishedSpawning") and v.FinishedSpawning.Value == true) then loaded = true break end
	end
end

local is
local plr = game.Players.LocalPlayer
repeat wait() until plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
_G.active = true
local reload = true
local reloadV = 0

local chests = {}
if(game.PlaceVersion ~= 1071) then return end

local tService = game:GetService("TweenService")

coroutine.resume(coroutine.create(function()
	while wait(.5) do
		if(not _G.active) then return end
		for i,v in pairs(workspace.Islands:GetChildren()) do
			is = v
			if(v.Owners:FindFirstChild(plr.UserId)) then
				break
			end
		end
		for i,v in pairs(is.Blocks:GetChildren()) do
			if(reload) then
				if(v.Name == "chestLargeIndustrialIO") then
					chests[#chests+1] = v
				end
			end
		end
		local moved = false
		local closest
		for i,v in pairs(chests) do
			if(not closest and #v.Contents:GetChildren() >= _G.stacksBeforeGrabbing) then
				if(#v.Contents:GetChildren() == 1) then
					local items = v.Contents:GetChildren()
					local item = items[1]
					if(item.Amount.Value > _G.grabWhenAbove) then
						closest = {v, (plr.Character.HumanoidRootPart.Position - v.Position).Magnitude}
					end
				else
					closest = {v, (plr.Character.HumanoidRootPart.Position - v.Position).Magnitude}
				end
			elseif(closest and (plr.Character.HumanoidRootPart.Position - v.Position).Magnitude < closest[2] and #v.Contents:GetChildren() >= _G.stacksBeforeGrabbing) then
				if(#v.Contents:GetChildren() == 1) then
					local items = v.Contents:GetChildren()
					local item = items[1]
					if(item.Amount.Value > _G.grabWhenAbove) then
						closest = {v, (plr.Character.HumanoidRootPart.Position - v.Position).Magnitude}
					end
				else
					closest = {v, (plr.Character.HumanoidRootPart.Position - v.Position).Magnitude}
				end
			end
		end
		if(not moved and closest) then
			moved = true
			local speed = 30
			local mag = closest[2]
			local timeWait = mag / speed
			local tween = tService:Create(plr.Character.HumanoidRootPart,
				TweenInfo.new(timeWait,Enum.EasingStyle.Linear,Enum.EasingDirection.Out,0,false,0),
				{CFrame = closest[1].CFrame + Vector3.new(0,2.5,0)})
			tween:Play()
			wait(timeWait)
			for ind,val in pairs(closest[1].Contents:GetChildren()) do
				local ohTable1 = {
					["chest"] = closest[1],
					["player_tracking_category"] = "join_from_web",
					["amount"] = val.Amount.Value,
					["tool"] = val,
					["action"] = "withdraw"
				}

				game:GetService("ReplicatedStorage").rbxts_include.node_modules["@rbxts"].net.out._NetManaged.CLIENT_CHEST_TRANSACTION:InvokeServer(ohTable1)
			end
		end
		reload = false
		if(reloadV >= 120) then
			reload = true
			reloadV = 0
			chests = {}
		end
	end
end))
